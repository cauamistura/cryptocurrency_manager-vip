//
//  CoinsListPresenter.swift
//  cryptocurrency_manager
//
//  Created by Caua Mistura on 14/09/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CoinsListPresentationLogic {
    func presentGlobalValues(response: CoinsList.FetchGlobalValues.Response)
    func presentListCoins(response: [CoinsList.FetchListCoin.Response])
    func presentError(error: CryptoCurrenciesError)
}

class CoinsListPresenter: CoinsListPresentationLogic {
    weak var viewController: CoinsListDisplayLogic?
    
    func presentGlobalValues(response: CoinsList.FetchGlobalValues.Response) {
        var globalValues: [CoinsList.FetchGlobalValues.ViewModel.GlobalValues] = []
        
        for (_, value) in response.totalMarketCap {
            globalValues.append(
                CoinsList.FetchGlobalValues.ViewModel.GlobalValues (title: "Capitalizacao de mercado global", value: value.toCurrency())
            )
        }
        
        for (_, value) in response.totalVolume {
            globalValues.append(
                CoinsList.FetchGlobalValues.ViewModel.GlobalValues (title: "Volume em 24 horas", value: value.toCurrency())
            )
        }
        
        let viewModel = CoinsList.FetchGlobalValues.ViewModel(globalValues: globalValues)
        
        viewController?.displayGlobalValues(viewModel: viewModel)
    }
    
    func presentListCoins(response: [CoinsList.FetchListCoin.Response]) {
        let coins = response.map { response in
            var rank = "-"
            
            if let marketCapRank = response.marketCap {
                rank = "\(marketCapRank)"
            }
            
            return CoinsList.FetchListCoin.ViewModel.Coin(id: response.id,
                                                          name: response.name,
                                                          rank: rank,
                                                          iconURL: response.image,
                                                          symbol: response.symbol.uppercased(),
                                                          price: response.currentPrice.toCurrency(),
                                                          priceChangedPercentage: response.marketCapChangePercentage.toPercentage(),
                                                          marketCapitalization: response.marketCap?.toCurrency() ?? "\u{2193} 0.0%"
            )
        }
        
        let viewModel = CoinsList.FetchListCoin.ViewModel(coins: coins)
        
        viewController?.displayListCoins(viewModel: viewModel)
    }
    
    func presentError(error: CryptoCurrenciesError) {
        viewController?.displayError(erro: error.errorDescription)
    }
}

extension Double {
    func toCurrency() -> String {
        let numberFormat = NumberFormatter()
        numberFormat.numberStyle = .currency
        numberFormat.locale = Locale(identifier: "pt_BR")
        
        guard let formattedCurrency = numberFormat.string(from: self as NSNumber) else {
            return "N/A"
        }
        
        return formattedCurrency
    }
    
    func toPercentage() -> String {
        let value = String(format: "%.1f", self).replacingOccurrences(of: "-", with: "")
        
        if self.sign == .minus {
            return "\u{2193} \(value)%"
        } else {
            return "\u{2191} \(value)%"
        }
    }
}
