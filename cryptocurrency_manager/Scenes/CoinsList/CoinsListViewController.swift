//
//  CoinsListViewController.swift
//  cryptocurrency_manager
//
//  Created by Caua Mistura on 14/09/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CoinsListDisplayLogic: AnyObject {
    func displayGlobalValues(viewModel: CoinsList.FetchGlobalValues.ViewModel)
    func displayListCoins(viewModel: CoinsList.FetchListCoin.ViewModel)
    func displayError(erro: String)
}

class CoinsListViewController: UIViewController {
    @IBOutlet weak var gloobalCollectionView: UICollectionView! {
        didSet {
            gloobalCollectionView.dataSource = self
        }
    }
    @IBOutlet weak var filterCollectionView: UICollectionView!{
        didSet {
            filterCollectionView.delegate = self
            filterCollectionView.dataSource = self
        }
    }
    @IBOutlet weak var listCoinsTableView: UITableView!{
        didSet {
            listCoinsTableView.delegate = self
            listCoinsTableView.dataSource = self
        }
    }
    
    private var globalViewModel: CoinsList.FetchGlobalValues.ViewModel?
    private var listCoinsViewMode: CoinsList.FetchListCoin.ViewModel?
    
    var interactor: CoinsListBusinessLogic?
    var router: (NSObjectProtocol & CoinsListRoutingLogic & CoinsListDataPassing)?
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = CoinsListInteractor()
        let presenter = CoinsListPresenter()
        let router = CoinsListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doFetchGlobalValues()
        doFestchListCoins()
    }
    
    func doFetchGlobalValues() {
        let request = CoinsList.FetchGlobalValues.Request(baseCoin: "brl")
        interactor?.doFetchGlobalValues(request: request)
    }
    
    func doFestchListCoins() {
        let request = CoinsList.FetchListCoin.Request(baseCoin: "brl", orderBy: "market_cap_desc", top: 10, pricePercentage: "1h")
        interactor?.doFetchListCoins(request: request)
    }
    
}

extension CoinsListViewController: CoinsListDisplayLogic {
    func displayGlobalValues(viewModel: CoinsList.FetchGlobalValues.ViewModel) {
        globalViewModel = viewModel
        DispatchQueue.main.async {
            self.gloobalCollectionView.reloadData()
        }
    }
    
    func displayListCoins(viewModel: CoinsList.FetchListCoin.ViewModel) {
        listCoinsViewMode = viewModel
        DispatchQueue.main.async {
            self.listCoinsTableView.reloadData()
        }
    }
    
    func displayError(erro: String) {
        print(erro)
    }
}

extension CoinsListViewController: UICollectionViewDelegate {}

extension CoinsListViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView ==  gloobalCollectionView {
            return globalViewModel?.globalValues.count ?? 0
        }
        return 4
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == gloobalCollectionView {
            guard let viewModel = globalViewModel else {return UICollectionViewCell()}
            
            if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: GlobalValuesCollectionViewCell.indentifier, for: indexPath) as? GlobalValuesCollectionViewCell {
                let globalValues = viewModel.globalValues[indexPath.row]
                cell.titleLabel.text = globalValues.title
                cell.valueLabel.text = globalValues.value
                
                return cell
            }
        }
        
        if collectionView == filterCollectionView {
            if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: FilterCollectionViewCell.indentifier, for: indexPath) as? FilterCollectionViewCell {
                return cell
            }
        }
        
        return UICollectionViewCell()
    }
}
extension CoinsListViewController: UITableViewDelegate {}

extension CoinsListViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listCoinsViewMode?.coins.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: CoinViewTableViewCell.indentifier, for: indexPath) as? CoinViewTableViewCell {
            guard let viewModel = listCoinsViewMode else {return UITableViewCell()}
            
            let coin = viewModel.coins[indexPath.row]
            cell.hankLabel.text = coin.rank
            cell.inconImage.loadImage(from: coin.iconURL)
            cell.symbolLabel.text = coin.symbol
            cell.marketCapLabel.text = coin.marketCapitalization
            cell.percentageLabel.text = coin.priceChangedPercentage
            cell.priceLabel.text = coin.price
            
            return cell
        }
        return UITableViewCell()
    }
}

